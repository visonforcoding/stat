<?php

namespace Proxies\__CG__\Yamei\RecEyeBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class HttpRequest extends \Yamei\RecEyeBundle\Entity\HttpRequest implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setRequestId($requestId)
    {
        $this->__load();
        return parent::setRequestId($requestId);
    }

    public function getRequestId()
    {
        $this->__load();
        return parent::getRequestId();
    }

    public function setMethodId($methodId)
    {
        $this->__load();
        return parent::setMethodId($methodId);
    }

    public function getMethodId()
    {
        $this->__load();
        return parent::getMethodId();
    }

    public function setUrlPathId($urlPathId)
    {
        $this->__load();
        return parent::setUrlPathId($urlPathId);
    }

    public function getUrlPathId()
    {
        $this->__load();
        return parent::getUrlPathId();
    }

    public function setUrlParamsId($urlParamsId)
    {
        $this->__load();
        return parent::setUrlParamsId($urlParamsId);
    }

    public function getUrlParamsId()
    {
        $this->__load();
        return parent::getUrlParamsId();
    }

    public function setRequest(\Yamei\RecEyeBundle\Entity\Request $request = NULL)
    {
        $this->__load();
        return parent::setRequest($request);
    }

    public function getRequest()
    {
        $this->__load();
        return parent::getRequest();
    }

    public function setMethod(\Yamei\RecEyeBundle\Entity\HttpMethod $method = NULL)
    {
        $this->__load();
        return parent::setMethod($method);
    }

    public function getMethod()
    {
        $this->__load();
        return parent::getMethod();
    }

    public function setUrlPath(\Yamei\RecEyeBundle\Entity\HttpUrlPath $urlPath = NULL)
    {
        $this->__load();
        return parent::setUrlPath($urlPath);
    }

    public function getUrlPath()
    {
        $this->__load();
        return parent::getUrlPath();
    }

    public function setUrlParams(\Yamei\RecEyeBundle\Entity\HttpUrlParams $urlParams = NULL)
    {
        $this->__load();
        return parent::setUrlParams($urlParams);
    }

    public function getUrlParams()
    {
        $this->__load();
        return parent::getUrlParams();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'request_id', 'method_id', 'url_path_id', 'url_params_id', 'request', 'urlPath', 'urlParams', 'method');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}